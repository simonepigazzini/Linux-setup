;; ### GLOBAL CONFIG ###
;; load paths
(add-to-list 'load-path "~/.emacs.d/lisp")
(add-to-list 'load-path "~/.emacs.d/lisp/powerline")
(add-to-list 'load-path "~/.emacs.d/lisp/org-opml")
(add-to-list 'load-path "~/.emacs.d/bbdbv3/")
;; yes or no >>> y or n
(fset 'yes-or-no-p 'y-or-n-p)
;; no startup msg  
(setq inhibit-startup-message t)
;; read argumets when session is resumed

;; ### INSTALL PACKAGES ###
;; # Melpa and org
(require 'package) 
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("org" . "https://orgmode.org/elpa/") t)
;; For important compatibility libraries like cl-lib
(when (< emacs-major-version 24)
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize) 

;; ### INSTALLED PACKAGES ###
;; multiple cursors
(require 'multiple-cursors)
;; the insidious Big Brother DataBase
(require 'bbdb)
(require 'bbdb-loaddefs)
(load "bbdb-com" t)
(load "bbdb-hooks" t)
(setq bbdb-north-american-phone-numbers-p nil) 
(bbdb-initialize 'gnus 'message)
(bbdb-mua-auto-update-init 'gnus 'message)
;; insinuates
(bbdb-insinuate-message)
(add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
;(add-hook 'message-setup-hook 'bbdb-define-all-aliases)
;; autocompletion in gnus
(setq bbdb/mail-auto-create-p nil)
(setq bbdb-complete-name-full-completion t
      bbdb-completion-type 'primary-or-name
      bbdb-complete-mail-allow-cycling t)
;; prevent popup
(setq bbdb-completion-display-record nil
      bbdb-mua-pop-up nil
      bbdb-offer-save 1)
;; autocreate entry for every addresses in mail
(setq bbdb-update-records-p 'create)
;; What do we do when invoking bbdb interactively
(setq bbdb-mua-update-interactive-p '(query . create))
;; Make sure we look at every address in a message and not only the
;; first one
(setq bbdb-message-all-addresses t)
;; bbdb home dir
(setq bbdb-file "~/.bbdb")
;; setup bbdb to recall gnus to write mails
(setq bbdb-send-mail-style 'gnus)

;; ### SPELL CHECK ###
;; flyspell dictionary
; (setq ispell-dictionary "en")

;; ### PROGRAMMING ###
;; .h files are c++ files
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
;; Indentation style
(setq-default indent-tabs-mode nil)
(setq c-default-style "linux"
      tab-width 4
      c-basic-offset 4)
;; Highlight matching brackets
(setq show-paren-delay 0)
(show-paren-mode 1)
(defadvice show-paren-function (after my-echo-paren-matching-line activate)
  "If a matching paren is off-screen, echo the matching line."
  (let* ((cb (char-before (point)))
         (matching-text (and cb
                             (char-equal (char-syntax cb) ?\) )
                             (blink-matching-open))))
    (when matching-text
      (setq matching-text (replace-regexp-in-string "Matches " "" matching-text))
      (setq matching-text (replace-regexp-in-string "...{" "" matching-text))
      (message "%s | %s..."
               (save-excursion
                 (search-backward matching-text)
                 (what-line))
               matching-text))))
;; Show line & column number 
(setq line-number-mode t)
(setq column-number-mode t)
;; Set column limit
(require 'fill-column-indicator)
(setq fci-rule-column 90)
(setq fci-rule-character-color "darkblue")
(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
;; Show column limit for c/c++ codes
(add-hook 'c-mode-common-hook '(lambda () (fci-mode 1)))
;; auto-completion
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)

;; Increment at point 
(defun increment-number-at-point ()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))
(global-set-key (kbd "C-c +") 'increment-number-at-point)

;; ### EIN ###
;;js rendering in ein
;(require 'ein-skewer)

;; EIN shortcuts
(global-set-key (kbd "C-c C-n") 'ein:jupyter-server-start)

;; ### LATEX ###
;; beamer help utils
(require 'beamer-utils)
(add-hook 'LaTeX-mode-hook 'bu-set-kbds) 

;; ### WEB BROWSING ###
;; google-this ergonomic key-mapping
(global-set-key (kbd "C-x g") 'google-this-search)

;; ### ISTANT MESSAGING ###
;; start bitlbee 
(require 'bitlbee)
(require 'erc)
(defun talk ()
  "Connect to IM networks using bitlbee."
  (interactive)
  (bitlbee-start)
  (erc :server "localhost" :port 6667 :nick "pigo" :password "laCumpax"))
;; identify
(defun bitlbee-identify ()
  (require 'credential)
  (when (and (string= "localhost" erc-session-server)
             (string= "&bitlbee" (buffer-name)))
    (erc-message "PRIVMSG" (format "%s identify %s %s"
                                   (erc-default-target)
                                   bitlbee-user
                                   bitlbee-pass))))
;; hock the identification function
(add-hook 'erc-join-hook 'bitlbee-identify)
;; jabber (gtalk)
(setq jabber-account-list
      '(("s.pigazzini@campus.unimib.it"
         (:network-server . "talk.google.com")
         (:connection-type . ssl)
         (:port . 443))))

;; ### TaskJuggler ###
;;(require 'org-taskjuggler)

;; ### ORG-MODE ###
(require 'org)
;; tags
(setq org-tag-alist 
      '(("meeting" . ?m)
      ("ecal" . ?e)
      ("dpg" . ?d)
      ("eth" . ?c)      
      ("hgg" . ?i)))

;; slides with reaveal.js
(require 'ox-reveal)
(setq org-reveal-root "file:///home/pigo/Projects/reveal.js")

;; OPML editor
(load-library "org-opml")

;; pdf-tools to view pdf files
(pdf-tools-install)

;; key-binding
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cc" 'org-capture)
;; custom
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline success warning error])
 '(ansi-color-names-vector
   ["gray35" "#ff8059" "#44bc44" "#eecc00" "#2fafff" "#feacd0" "#00d3d0" "gray65"])
 '(awesome-tray-mode-line-active-color "#2fafff")
 '(awesome-tray-mode-line-inactive-color "#323232")
 '(custom-safe-themes
   '("4ce515d79ef94f3b7651c8e2a7c7d81814b9ca911eb2a16955f45f4555faf524" default))
 '(ein:url-or-port '(9800))
 '(exwm-floating-border-color "#646464")
 '(flymake-error-bitmap '(flymake-double-exclamation-mark modus-theme-fringe-red))
 '(flymake-note-bitmap '(exclamation-mark modus-theme-fringe-cyan))
 '(flymake-warning-bitmap '(exclamation-mark modus-theme-fringe-yellow))
 '(highlight-tail-colors '(("#2f4a00" . 0) ("#00415e" . 20)))
 '(hl-todo-keyword-faces
   '(("HOLD" . "#cfdf30")
     ("TODO" . "#feacd0")
     ("NEXT" . "#b6a0ff")
     ("THEM" . "#f78fe7")
     ("PROG" . "#00d3d0")
     ("OKAY" . "#4ae8fc")
     ("DONT" . "#80d200")
     ("FAIL" . "#ff8059")
     ("BUG" . "#ff8059")
     ("DONE" . "#44bc44")
     ("NOTE" . "#f0ce43")
     ("KLUDGE" . "#eecc00")
     ("HACK" . "#eecc00")
     ("TEMP" . "#ffcccc")
     ("FIXME" . "#ff9977")
     ("XXX+" . "#f4923b")
     ("REVIEW" . "#6ae4b9")
     ("DEPRECATED" . "#bfd9ff")))
 '(ibuffer-deletion-face 'modus-theme-mark-del)
 '(ibuffer-filter-group-name-face 'modus-theme-mark-symbol)
 '(ibuffer-marked-face 'modus-theme-mark-sel)
 '(ibuffer-title-face 'modus-theme-pseudo-header)
 '(org-agenda-files
   '("~/Work/CMS/org-agenda/agenda_2020.org" "/home/pigo/Work/CMS/org-agenda/tasks.org"))
 '(org-directory "/home/pigo/Work/CMS/org-agenda/")
 '(org-emphasis-alist
   '(("!"
      (:foreground "red")
      verbatim)
     ("*" bold)
     ("/" italic)
     ("_" underline)
     ("=" org-verbatim verbatim)
     ("~" org-code verbatim)
     ("+"
      (:strike-through t))))
 '(org-src-block-faces 'nil)
 '(package-selected-packages
   '(flycheck-languagetool languagetool tickscript-mode nhexl-mode request http hmac auto-complete htmlize offlineimap use-package moody modus-themes modus-operandi-theme modus-vivendi-theme go-mode groovy-mode magit skewer-mode markdown-mode markdown-mode+ xah-find ox-reveal ein ein-mumamo org org-ac org-download yaml-mode fish-mode powerline telephone-line typescript-mode tss multiple-cursors jabber google-this auto-dictionary auctex))
 '(pdf-view-midnight-colors '("#ffffff" . "#110b11"))
 '(vc-annotate-background nil)
 '(vc-annotate-background-mode nil)
 '(vc-annotate-color-map
   '((20 . "#ff8059")
     (40 . "#feacd0")
     (60 . "#f78fe7")
     (80 . "#f4923b")
     (100 . "#eecc00")
     (120 . "#cfdf30")
     (140 . "#f8dec0")
     (160 . "#bfebe0")
     (180 . "#44bc44")
     (200 . "#80d200")
     (220 . "#6ae4b9")
     (240 . "#4ae8fc")
     (260 . "#00d3d0")
     (280 . "#c6eaff")
     (300 . "#2fafff")
     (320 . "#79a8ff")
     (340 . "#00bcff")
     (360 . "#b6a0ff")))
 '(vc-annotate-very-old-color nil)
 '(xterm-color-names
   ["black" "#ff8059" "#44bc44" "#eecc00" "#2fafff" "#feacd0" "#00d3d0" "gray65"])
 '(xterm-color-names-bright
   ["gray35" "#f4923b" "#80d200" "#cfdf30" "#79a8ff" "#f78fe7" "#4ae8fc" "white"]))

;; sparse tree with archived items in agenda views
(defun org-sparse-tree-archive (&optional arg type)
  (interactive)
  (setq org-sparse-tree-open-archived-trees t)
  (org-sparse-tree arg type)
  (setq org-sparse-tree-open-archived-trees nil))
(global-set-key "\C-c\C-\\" 'org-sparse-tree-archive)

;; ### ORG-CAPTURE ###
(require 'indico)

(defun org-ask-location ()
  (let* ((org-refile-use-outline-path t)
         (org-outline-path-complete-in-steps nil)
         (org-refile-targets '((nil :maxlevel . 9)))
         (hd (condition-case nil
                 (car (org-refile-get-location "Headline" nil t))
               (error (car org-refile-history)))))
    (goto-char (point-min))
    (setq hd (if (string-match "/$" hd)
                 (replace-match "" nil t hd)
               hd))
    (setq hd-list (split-string hd "/"))
    (while hd-list
      (if (re-search-forward
           (format org-complex-heading-regexp-format (regexp-quote (car hd-list)))
                   nil t)
          (goto-char (point-at-eol))
        (progn
          (org-insert-heading-respect-content)
          (insert (car hd-list))
          (org-do-demote)
          (goto-char (point-at-eol))))
        (setq hd-list (cdr hd-list)))
    (end-of-line)))

(setq org-capture-templates
      '(("r" "Emails to follow up to")
        ("re" "ECAL" entry
         (file+olp "tasks.org" "ECAL" "Emails to be followed up")
         "* TODO %a %^G %?")
        ("rh" "Hgg" entry
         (file+olp "tasks.org" "Hgg" "Emails to be followed up")
         "* TODO %a %^G %?")
        ("rv" "Various" entry
         (file+olp "tasks.org" "Various" "Emails to be followed up")
         "* TODO %a %^G %?")
        ("m" "Add meeting")
        ("mc" "Chat with ..." entry
         (file+function "tasks.org" org-ask-location)
         "* %^{PROMPT} \n %^t \n %?")
        ("mi" "Indico event" entry
         (file+function "agenda_2020.org" indico-get-event-category-oc)
         "* %(indico-convert-event (org-capture-get :initial)) %?")))

(setq org-capture-templates-contexts
      '(("r" ((in-mode . "gnus-article-mode")
              (in-mode . "gnus-summary-mode")
              (in-mode . "gnus-message-mode")))))

(setq org-agenda-custom-commands
      '(("X" agenda "" nil ("cms-agenda.html"))))

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

(set-face-attribute 'default nil :height 150)

(require 'modus-themes)
(require 'modus-vivendi-theme)

(setq modus-themes-slanted-constructs t
      modus-themes-bold-constructs nil
      modus-themes-fringes nil ; {nil,'subtle,'intense}
      modus-themes-mode-line 'moody ; {nil,'3d,'moody}
      modus-themes-syntax nil ; Lots of options---continue reading the manual
      modus-themes-intense-hl-line nil
      modus-themes-paren-match 'subtle-bold ; {nil,'subtle-bold,'intense,'intense-bold}
      modus-themes-links 'neutral-underline ; Lots of options---continue reading the manual
      modus-themes-no-mixed-fonts nil
      modus-themes-prompts nil ; {nil,'subtle,'intense}
      modus-themes-completions nil ; {nil,'moderate,'opinionated}
      modus-themes-region 'bg-only-no-extend ; {nil,'no-extend,'bg-only,'bg-only-no-extend}
      modus-themes-diffs nil ; {nil,'desaturated,'fg-only,'bg-only}
      modus-themes-org-blocks nil ; {nil,'grayscale,'rainbow}
      modus-themes-headings ; Lots of options---continue reading the manual
      '((1 . section)
        (2 . section-no-bold)
        (3 . rainbow-line)
        (t . rainbow-line-no-bold))
      modus-themes-variable-pitch-headings nil
      modus-themes-scale-headings nil
      modus-themes-scale-1 1.1
      modus-themes-scale-2 1.15
      modus-themes-scale-3 1.21
      modus-themes-scale-4 1.27
      modus-themes-scale-5 1.33)

(load-theme 'modus-vivendi t)
(global-set-key (kbd "<f5>") #'modus-themes-toggle)

;; auto fill mode
(global-set-key (kbd "C-c q") 'refill-mode)
(setq-default fill-column 90)

;; ### MOODY mode line ###
(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ein:cell-input-area ((t (:background "dim gray"))))
 '(org-archived ((t (:background "black" :foreground "#a8a8a8")))))
