;; ### GLOBAL CONFIG ###
;; load paths
(add-to-list 'load-path "~/.emacs.d/lisp")
(add-to-list 'load-path "~/.emacs.d/bbdbv3/")
;; yes or no >>> y or n
(fset 'yes-or-no-p 'y-or-n-p)
;; no startup msg  
(setq inhibit-startup-message t)
;; read argumets when session is resumed

;; ### INSTALL PACKAGES ###
;; # Melpa
(require 'package) 
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
;; For important compatibility libraries like cl-lib
(when (< emacs-major-version 24)
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize) 

;; ### INSTALLED PACKAGES ###
;; multiple cursors
(require 'multiple-cursors)
;; the insidious Big Brother DataBase
(require 'bbdb)
(require 'bbdb-loaddefs)
(load "bbdb-com" t)
(load "bbdb-hooks" t)
(setq bbdb-north-american-phone-numbers-p nil) 
(bbdb-initialize 'gnus 'message)
(bbdb-mua-auto-update-init 'gnus 'message)
;; insinuates
(bbdb-insinuate-message)
(add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
;(add-hook 'message-setup-hook 'bbdb-define-all-aliases)
;; autocompletion in gnus
(setq bbdb/mail-auto-create-p nil)
(setq bbdb-complete-name-full-completion t
      bbdb-completion-type 'primary-or-name
      bbdb-complete-mail-allow-cycling t)
;; prevent popup
(setq bbdb-completion-display-record nil
      bbdb-mua-pop-up nil
      bbdb-offer-save 1)
;; autocreate entry for every addresses in mail
(setq bbdb-update-records-p 'create)
;; What do we do when invoking bbdb interactively
(setq bbdb-mua-update-interactive-p '(query . create))
;; Make sure we look at every address in a message and not only the
;; first one
(setq bbdb-message-all-addresses t)
;; bbdb home dir
(setq bbdb-file "~/.bbdb")
;; setup bbdb to recall gnus to write mails
(setq bbdb-send-mail-style 'gnus)

;; ### SPELL CHECK ###
;; flyspell dictionary
(setq ispell-dictionary "en")

;; ### PROGRAMMING ###
;; .h files are c++ files
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
;; Indentation style
(setq-default indent-tabs-mode nil)
(setq c-default-style "linux"
      tab-width 4
      c-basic-offset 4)
;; Highlight matching brackets
(setq show-paren-delay 0)
(show-paren-mode 1)
(defadvice show-paren-function (after my-echo-paren-matching-line activate)
  "If a matching paren is off-screen, echo the matching line."
  (let* ((cb (char-before (point)))
         (matching-text (and cb
                             (char-equal (char-syntax cb) ?\) )
                             (blink-matching-open))))
    (when matching-text
      (setq matching-text (replace-regexp-in-string "Matches " "" matching-text))
      (setq matching-text (replace-regexp-in-string "...{" "" matching-text))
      (message "%s | %s..."
               (save-excursion
                 (search-backward matching-text)
                 (what-line))
               matching-text))))
;; Show line & column number 
(setq line-number-mode t)
(setq column-number-mode t)
;; Set column limit
(require 'fill-column-indicator)
(setq fci-rule-column 90)
(setq fci-rule-character-color "darkblue")
(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
;; Show column limit for c/c++ codes
(add-hook 'c-mode-common-hook '(lambda () (fci-mode 1)))
;; auto-completion
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)

;; ### LATEX ###
;; beamer help utils
(require 'beamer-utils)
(add-hook 'latex-mode-hook 'bu-set-kbds) 

;; ### WEB BROWSING ###
;; firefox 36 bugfix (check with later emacs version)
(setq browse-url-browser-function 'browse-url-firefox
      browse-url-new-window-flag  nil
      browse-url-firefox-new-window-is-tab t)

(defun browse-url-firefox (url &optional new-window)
  "Ask the Firefox WWW browser to load URL.
  Default to the URL around or before point.  The strings in
  variable 'browse-url-firefox-arguments' are also passed to
  Firefox.
  
  When called interactively, if variable
  'browse-url-new-window-flag' is non-nil, load the document in a
  new Firefox window, otherwise use a random existing one.  A
  non-nil interactive prefix argument reverses the effect of
  'browse-url-new-window-flag'.
  
  If 'browse-url-firefox-new-window-is-tab' is non-nil, then
  whenever a document would otherwise be loaded in a new window, it
  is loaded in a new tab in an existing window instead.
  
  When called non-interactively, optional second argument
  NEW-WINDOW is used instead of 'browse-url-new-window-flag'."
  (interactive (browse-url-interactive-arg "URL: "))
  (setq url (browse-url-encode-url url))
  (let* ((process-environment (browse-url-process-environment))
         ;; (window-args (if (browse-url-maybe-new-window new-window)
         ;;                  (if browse-url-firefox-new-window-is-tab
         ;;                      '("--new-tab")
         ;;                    '("--new-window"))))
         (ff-args (append browse-url-firefox-arguments window-args (list url)))
         (process-name (concat "firefox --new-tab" url))
         (process (apply 'start-process process-name nil
                         browse-url-firefox-program ff-args)))))

;; ### ISTANT MESSAGING ###
;; start bitlbee 
(require 'bitlbee)
(require 'erc)
(defun talk ()
  "Connect to IM networks using bitlbee."
  (interactive)
  (bitlbee-start)
  (erc :server "localhost" :port 6667 :nick "pigo" :password "laCumpax"))
;; identify
(defun bitlbee-identify ()
  (require 'credential)
  (when (and (string= "localhost" erc-session-server)
             (string= "&bitlbee" (buffer-name)))
    (erc-message "PRIVMSG" (format "%s identify %s %s"
                                   (erc-default-target)
                                   bitlbee-user
                                   bitlbee-pass))))
;; hock the identification function
(add-hook 'erc-join-hook 'bitlbee-identify)
;; jabber (gtalk)
(setq jabber-account-list
      '(("s.pigazzini@campus.unimib.it"
         (:network-server . "talk.google.com")
         (:connection-type . ssl)
         (:port . 443))))

;; ### ORG-MODE ###
(require 'org)
;; tags
(setq org-tag-alist 
      '(("meeting" . ?m)
      ("ecal" . ?e)
      ("dpg" . ?d)
      ("cms" . ?c)
      ("tb" . ?t)
      ("analysis" . ?a)
      ("flashgg" . ?f)
      ("imcp" . ?i)))

;; key-binding
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
;; custum
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files (quote ("~/.AGENDA/phd.org")))
 '(org-emphasis-alist
   (quote
    (("!"
      (:foreground "red") verbatim)
     ("*" bold)
     ("/" italic)
     ("_" underline)
     ("=" org-verbatim verbatim)
     ("~" org-code verbatim)
     ("+"
      (:strike-through t))))))
 
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(font-lock-builtin-face ((t (:foreground "white"))))
 '(font-lock-string-face ((t (:foreground "brightyellow"))))
 '(font-lock-type-face ((t (:foreground "blue"))))
 '(gnus-cite-1 ((t (:foreground "color-37"))))
 '(gnus-group-mail-1 ((t (:foreground "magenta" :weight bold))))
 '(gnus-group-mail-3 ((t (:foreground "color-198" :weight bold))))
 '(gnus-group-mail-3-empty ((t (:foreground "cyan"))))
 '(gnus-header-content ((t (:foreground "brightred" :slant italic))))
 '(gnus-header-name ((t (:foreground "blue"))))
 '(gnus-header-subject ((t (:foreground "cyan"))))
 '(highlight ((t (:background "brightblack"))))
 '(message-header-cc ((t (:foreground "red"))))
 '(message-header-subject ((t (:foreground "cyan" :weight bold))))
 '(message-header-to ((t (:foreground "red" :weight bold))))
 '(org-level-2 ((t (:inherit outline-8))))
 '(region ((t (:background "brightblack")))))

(set-face-foreground 'minibuffer-prompt "lightblue")

;; auto fill mode
(global-set-key (kbd "C-c q") 'refill-mode)
(setq-default fill-column 90)

;; (setq org-export-latex-emphasis-alist
;;       '("!" "{\\color{red}%s}" nil))

(require 'org-install)
