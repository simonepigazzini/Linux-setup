;; ### GLOBAL CONFIG ###
;; load paths
(add-to-list 'load-path "~/.emacs.d/")
(add-to-list 'load-path "~/.emacs.d/bbdbv3/")
;; yes or no >>> y or n
(fset 'yes-or-no-p 'y-or-n-p)
;; no startup msg  
(setq inhibit-startup-message t)  

;; ### INSTALL PACKAGES ###
;; # Melpa
(require 'package) 
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
;; For important compatibility libraries like cl-lib
(when (< emacs-major-version 24)
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize) 

;; ### INSTALLED PACKAGES ###
;; multiple cursors
(require 'multiple-cursors)
;; web text browser w3m
(require 'w3m)
;; the insidious Big Brother DataBase
(require 'bbdb)
(require 'bbdb-loaddefs)
(load "bbdb-com" t)
(load "bbdb-hooks" t)
(setq bbdb-north-american-phone-numbers-p nil) 
(bbdb-initialize 'gnus 'message)
(bbdb-mua-auto-update-init 'gnus 'message)
;; insinuates
(bbdb-insinuate-message)
(add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
;(add-hook 'message-setup-hook 'bbdb-define-all-aliases)
;; autocompletion in gnus
(setq bbdb/mail-auto-create-p nil)
(setq bbdb-complete-name-full-completion t
      bbdb-completion-type 'primary-or-name
      bbdb-complete-mail-allow-cycling t)
;; prevent popup
(setq bbdb-completion-display-record nil
      bbdb-mua-pop-up nil
      bbdb-offer-save 1)
;; autocreate entry for every addresses in mail
(setq bbdb-update-records-p 'create)
;; What do we do when invoking bbdb interactively
(setq bbdb-mua-update-interactive-p '(query . create))
;; Make sure we look at every address in a message and not only the
;; first one
(setq bbdb-message-all-addresses t)
;; bbdb home dir
(setq bbdb-file "~/.bbdb")
;; setup bbdb to recall gnus to write mails
(setq bbdb-send-mail-style 'gnus)

;; ### SPELL CHECK ###
;; flyspell dictionary
(setq ispell-dictionary "en")

;; ### PROGRAMMING ###
;; Indentation style                                                                                                                                 
(setq-default indent-tabs-mode nil)
(setq c-default-style "linux"
      tab-width 4
      c-basic-offset 4)
;; Highlight matching brackets
(setq show-paren-delay 0)
(show-paren-mode 1)
;; Show line & column number 
(setq line-number-mode t)
(setq column-number-mode t)
;; Set column limit
(require 'fill-column-indicator)
(setq fci-rule-column 90)
(setq fci-rule-character-color "darkblue")
(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
;; Show column limit for c/c++ codes
(add-hook 'c-mode-common-hook '(lambda () (fci-mode 1)))
;; spell check for comments only
(add-hook 'c++-mode-hook (lambda () (flyspell-prog-mode)))
;; auto-completion
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)

;; ### WEB BROWSING ###
;; firefox
(setq browse-url-browser-function 'browse-url-firefox
      browse-url-new-window-flag  t
      browse-url-firefox-new-window-is-tab t)

;; ### ISTANT MESSAGING ###
;; start bitlbee 
(require 'bitlbee)
(require 'erc)
(defun talk ()
  "Connect to IM networks using bitlbee."
  (interactive)
  (bitlbee-start)
  (erc :server "localhost" :port 6667 :nick "pigo" :password "laCumpax"))
;; identify
(defun bitlbee-identify ()
  (require 'credential)
  (when (and (string= "localhost" erc-session-server)
             (string= "&bitlbee" (buffer-name)))
    (erc-message "PRIVMSG" (format "%s identify %s %s"
                                   (erc-default-target)
                                   bitlbee-user
                                   bitlbee-pass))))
;; hock the identification function
(add-hook 'erc-join-hook 'bitlbee-identify)

;; ### ORG-MODE ###
(require 'org)
;; tags
(setq org-tag-alist 
      '(("meeting" . ?m)))
;; key-binding
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
