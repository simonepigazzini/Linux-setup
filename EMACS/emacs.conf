;; ### GLOBAL CONFIG ###
;; load paths
(add-to-list 'load-path "~/.emacs.d/lisp")
(add-to-list 'load-path "~/.emacs.d/lisp/powerline")
(add-to-list 'load-path "~/.emacs.d/lisp/org-opml")
(add-to-list 'load-path "~/.emacs.d/bbdbv3/")
;; yes or no >>> y or n
(fset 'yes-or-no-p 'y-or-n-p)
;; no startup msg  
(setq inhibit-startup-message t)
;; read argumets when session is resumed

;; ### INSTALL PACKAGES ###
;; # Melpa and org
(require 'package) 
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("org" . "https://orgmode.org/elpa/") t)
;; For important compatibility libraries like cl-lib
(when (< emacs-major-version 24)
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize) 

;; ### INSTALLED PACKAGES ###
;; multiple cursors
(require 'multiple-cursors)
;; the insidious Big Brother DataBase
(require 'bbdb)
(require 'bbdb-loaddefs)
(load "bbdb-com" t)
(load "bbdb-hooks" t)
(setq bbdb-north-american-phone-numbers-p nil) 
(bbdb-initialize 'gnus 'message)
(bbdb-mua-auto-update-init 'gnus 'message)
;; insinuates
(bbdb-insinuate-message)
(add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
;(add-hook 'message-setup-hook 'bbdb-define-all-aliases)
;; autocompletion in gnus
(setq bbdb/mail-auto-create-p nil)
(setq bbdb-complete-name-full-completion t
      bbdb-completion-type 'primary-or-name
      bbdb-complete-mail-allow-cycling t)
;; prevent popup
(setq bbdb-completion-display-record nil
      bbdb-mua-pop-up nil
      bbdb-offer-save 1)
;; autocreate entry for every addresses in mail
(setq bbdb-update-records-p 'create)
;; What do we do when invoking bbdb interactively
(setq bbdb-mua-update-interactive-p '(query . create))
;; Make sure we look at every address in a message and not only the
;; first one
(setq bbdb-message-all-addresses t)
;; bbdb home dir
(setq bbdb-file "~/.bbdb")
;; setup bbdb to recall gnus to write mails
(setq bbdb-send-mail-style 'gnus)

;; ### SPELL CHECK ###
;; flyspell dictionary
(setq ispell-dictionary "en")
;; langtool interface
(require 'langtool)
(setq langtool-language-tool-jar "/usr/local/src/LanguageTool-3.5/languagetool-commandline.jar")
;; popup langtool menu, only for gnus
(defun langtool-autoshow-detail-popup (overlays)
  (when (require 'popup nil t)
    ;; Do not interrupt current popup
    (unless (or popup-instances
                ;; suppress popup after type `C-g' .
                (memq last-command '(keyboard-quit)))
      (let ((msg (langtool-details-error-message overlays)))
        (popup-tip msg)))))

(setq langtool-autoshow-message-function
      'langtool-autoshow-detail-popup)


;; ### PROGRAMMING ###
;; .h files are c++ files
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
;; Indentation style
(setq-default indent-tabs-mode nil)
(setq c-default-style "linux"
      tab-width 4
      c-basic-offset 4)
;; Highlight matching brackets
(setq show-paren-delay 0)
(show-paren-mode 1)
(defadvice show-paren-function (after my-echo-paren-matching-line activate)
  "If a matching paren is off-screen, echo the matching line."
  (let* ((cb (char-before (point)))
         (matching-text (and cb
                             (char-equal (char-syntax cb) ?\) )
                             (blink-matching-open))))
    (when matching-text
      (setq matching-text (replace-regexp-in-string "Matches " "" matching-text))
      (setq matching-text (replace-regexp-in-string "...{" "" matching-text))
      (message "%s | %s..."
               (save-excursion
                 (search-backward matching-text)
                 (what-line))
               matching-text))))
;; Show line & column number 
(setq line-number-mode t)
(setq column-number-mode t)
;; Set column limit
(require 'fill-column-indicator)
(setq fci-rule-column 90)
(setq fci-rule-character-color "darkblue")
(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
;; Show column limit for c/c++ codes
(add-hook 'c-mode-common-hook '(lambda () (fci-mode 1)))
;; auto-completion
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)

;; Increment at point 
(defun increment-number-at-point ()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))
(global-set-key (kbd "C-c +") 'increment-number-at-point)

;; ### EIN ###
;;js rendering in ein
(require 'ein-skewer)

;; EIN shortcuts
(global-set-key (kbd "C-c C-n") 'ein:jupyter-server-start)

;; ### LATEX ###
;; beamer help utils
(require 'beamer-utils)
(add-hook 'LaTeX-mode-hook 'bu-set-kbds) 

;; ### WEB BROWSING ###
;; google-this ergonomic key-mapping
(global-set-key (kbd "C-x g") 'google-this-search)

;; ### ISTANT MESSAGING ###
;; start bitlbee 
(require 'bitlbee)
(require 'erc)
(defun talk ()
  "Connect to IM networks using bitlbee."
  (interactive)
  (bitlbee-start)
  (erc :server "localhost" :port 6667 :nick "pigo" :password "laCumpax"))
;; identify
(defun bitlbee-identify ()
  (require 'credential)
  (when (and (string= "localhost" erc-session-server)
             (string= "&bitlbee" (buffer-name)))
    (erc-message "PRIVMSG" (format "%s identify %s %s"
                                   (erc-default-target)
                                   bitlbee-user
                                   bitlbee-pass))))
;; hock the identification function
(add-hook 'erc-join-hook 'bitlbee-identify)
;; jabber (gtalk)
(setq jabber-account-list
      '(("s.pigazzini@campus.unimib.it"
         (:network-server . "talk.google.com")
         (:connection-type . ssl)
         (:port . 443))))

;; ### TaskJuggler ###
;;(require 'org-taskjuggler)

;; ### ORG-MODE ###
(require 'org)
;; tags
(setq org-tag-alist 
      '(("meeting" . ?m)
      ("ecal" . ?e)
      ("dpg" . ?d)
      ("eth" . ?c)      
      ("hgg" . ?i)))

;; slides with reaveal.js
(require 'ox-reveal)
(setq org-reveal-root "file:///home/pigo/Projects/reveal.js")

;; OPML editor
(load-library "org-opml")

;; key-binding
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
;; custom
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ein:url-or-port '(9800))
 '(org-agenda-files '("~/scratch/org-agenda/test_indico_import.org"))
 '(org-emphasis-alist
   '(("!"
      (:foreground "red")
      verbatim)
     ("*" bold)
     ("/" italic)
     ("_" underline)
     ("=" org-verbatim verbatim)
     ("~" org-code verbatim)
     ("+"
      (:strike-through t))))
 '(package-selected-packages
   '(go-mode groovy-mode magit skewer-mode markdown-mode markdown-mode+ xah-find ox-reveal ein ein-mumamo org org-ac org-download yaml-mode fish-mode powerline telephone-line typescript-mode tss multiple-cursors langtool jabber google-this auto-dictionary auctex)))

;; sparse tree with archived items in agenda views
(defun org-sparse-tree-archive (&optional arg type)
  (interactive)
  (setq org-sparse-tree-open-archived-trees t)
  (org-sparse-tree arg type)
  (setq org-sparse-tree-open-archived-trees nil))
(global-set-key "\C-c\C-\\" 'org-sparse-tree-archive)

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ein:cell-output-area ((t nil)) t)
 '(font-latex-sectioning-2-face ((t (:foreground "brightblue" :height 1.1))))
 '(font-lock-builtin-face ((t (:foreground "white"))))
 '(font-lock-doc-face ((t (:inherit font-lock-string-face :foreground "spring green"))))
 '(font-lock-function-name-face ((t (:foreground "color-33"))))
 '(font-lock-string-face ((t (:foreground "brightyellow"))))
 '(font-lock-type-face ((t (:foreground "brightblue"))))
 '(gnus-cite-1 ((t (:foreground "color-37"))))
 '(gnus-group-mail-1 ((t (:foreground "magenta" :weight bold))))
 '(gnus-group-mail-3 ((t (:foreground "color-198" :weight bold))))
 '(gnus-group-mail-3-empty ((t (:foreground "cyan"))))
 '(gnus-header-content ((t (:foreground "brightred" :slant italic))))
 '(gnus-header-name ((t (:foreground "firebrick"))))
 '(gnus-header-subject ((t (:foreground "cyan"))))
 '(highlight ((t (:background "dark goldenrod"))))
 '(message-header-cc ((t (:foreground "red"))))
 '(message-header-subject ((t (:foreground "cyan" :weight bold))))
 '(message-header-to ((t (:foreground "red" :weight bold))))
 '(org-agenda-structure ((t (:foreground "brightblack"))))
 '(org-date ((t (:foreground "cyan" :underline t))))
 '(org-document-info ((t (:foreground "color-27"))))
 '(org-document-title ((t (:foreground "brightred" :weight bold))))
 '(org-level-2 ((t (:foreground "color-100"))))
 '(org-level-3 ((t (:foreground "brightyellow"))))
 '(org-special-keyword ((t (:inherit font-lock-keyword-face :foreground "brightblack"))))
 '(org-table ((t (:foreground "cyan"))))
 '(region ((t (:background "goldenrod" :foreground "black"))))
 '(rst-level-1 ((t (:background "color-19"))))
 '(rst-level-2 ((t (:background "color-21"))))
 '(smerge-upper ((t (:background "yellow")))))

(set-face-foreground 'minibuffer-prompt "lightblue")

(set-face-attribute 'default nil :height 150)

;; auto fill mode
(global-set-key (kbd "C-c q") 'refill-mode)
(setq-default fill-column 90)

;; ### POWERLINE ###
(require 'powerline)
(powerline-default-theme)


